package com.ecommerce.database;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
//import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController {
  @Autowired // This means to get the bean called userRepository
         // Which is auto-generated by Spring, we will use it to handle the data
  private UserRepository userRepository;
  //private ItemRepository itemRepository;


  @GetMapping(path="/listAll")
  public @ResponseBody Iterable<AppUser> getAllUsers() {
    // This returns a JSON or XML with the users
    return userRepository.findAll();
  }

  @GetMapping(path="/addOne") // Map ONLY POST Requests --------------------- SHOULD BE POST
  public @ResponseBody String addNewUser (@RequestParam String name
      , @RequestParam String password) {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request

    AppUser n = new AppUser();
    n.setName(name);
    n.setPassword(password);
    n.setItem("");
    userRepository.save(n);
    return "Saved";
  }

  @GetMapping(path="/deleteAll") // Map ONLY POST Requests --------------------- SHOULD BE POST
  public @ResponseBody String deleteAllUsers () {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request

    userRepository.deleteAll();
    return "All users deleted";
  }



  @GetMapping(path="/addItem") // ------------------------------------------ SHOULD BE POST
  public @ResponseBody String addItem (@RequestParam String item
  , @RequestParam String name) {
  
    var existingUsers = userRepository.findAll();
    for (AppUser user : existingUsers) {
        if (user.getName().equals(name)) {
            user.setItem(item); 
            userRepository.save(user);
        }
    }
    return "Added that item to the users cart";
  }

  @GetMapping(path="/deleteItem") // ------------------------------------------ SHOULD BE POST
  public @ResponseBody String deleteItem (@RequestParam String item
  , @RequestParam String name) {
  
    var existingUsers = userRepository.findAll();
    for (AppUser user : existingUsers) {
        if (user.getName().equals(name)) {
            user.deleteItem(item); 
            userRepository.save(user);
        }
    }
    return "Deleted that item from the users cart";
  } 
}